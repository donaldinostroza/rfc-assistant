# Nombre del flujo de trabajo que aparecerá en la pestaña "Actions" de GitHub
name: Extract Mercado Publico RFCs Daily

on:
  # Permite ejecutar este flujo de trabajo manualmente desde la interfaz de GitHub
  workflow_dispatch:
  
  # Define el horario de ejecución automática
  schedule:
    # Ejecuta el script todos los días a las 07:00 UTC.
    # Esto corresponde a las 3:00 AM en Chile (UTC-4).
    - cron: '0 7 * * *'

jobs:
  # Define un único "trabajo" llamado extract-data
  extract-data:
    # Especifica que el trabajo se ejecutará en una máquina virtual con la última versión de Ubuntu
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Clonar tu repositorio en la máquina virtual
      # Esto permite que el flujo de trabajo acceda a tu script y a la base de datos
      - name: Checkout repository
        uses: actions/checkout@v4

      # Paso 2: Configurar el entorno de Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Puedes usar una versión más reciente si lo prefieres

      # Paso 3: Instalar las dependencias de Python listadas en requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Paso 4: Ejecutar el script de extracción
      - name: Run RFC extractor script
        env:
          # Pasa el secret API_TICKET como una variable de entorno al script
          API_TICKET: ${{ secrets.API_TICKET }}
        run: python extractor.py

      # Paso 5: Guardar los cambios en la base de datos de vuelta al repositorio
      - name: Commit and push if database changed
        run: |
          # Configura el autor para los commits que hará el bot
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Añade el archivo de la base de datos al área de preparación (staging)
          git add licitaciones.db
          
          # Revisa si hay cambios en el archivo. Si no hay, no hace nada.
          if git diff --staged --quiet; then
            echo "No changes in the database to commit."
          else
            # Si hay cambios, crea un commit con un mensaje dinámico y lo sube al repositorio
            git commit -m "Update database with new RFCs for $(date +'%Y-%m-%d')"
            git push
          fi
